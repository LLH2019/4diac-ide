/**
 * generated by Xtext
 */
package org.eclipse.fordiac.ide.model.structuredtext.ui.labeling;

import com.google.inject.Inject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.fordiac.ide.model.libraryElement.BasicFBType;
import org.eclipse.fordiac.ide.model.libraryElement.VarDeclaration;
import org.eclipse.fordiac.ide.util.imageprovider.FordiacImage;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
@SuppressWarnings("all")
public class StructuredTextLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public StructuredTextLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public CharSequence text(final VarDeclaration decl) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = decl.getName();
    _builder.append(_name);
    _builder.append(" [");
    String _typeName = decl.getTypeName();
    _builder.append(_typeName);
    _builder.append("]");
    return _builder;
  }
  
  public ImageDescriptor image(final VarDeclaration decl) {
    ImageDescriptor _xifexpression = null;
    if (((decl.eContainer() instanceof BasicFBType) && ((BasicFBType) decl.eContainer()).getInternalVars().contains(decl))) {
      _xifexpression = FordiacImage.ICON_Data.getImageDescriptor();
    } else {
      ImageDescriptor _xifexpression_1 = null;
      boolean _isIsInput = decl.isIsInput();
      if (_isIsInput) {
        _xifexpression_1 = FordiacImage.ICON_DataInput.getImageDescriptor();
      } else {
        _xifexpression_1 = FordiacImage.ICON_DataOutput.getImageDescriptor();
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
}
